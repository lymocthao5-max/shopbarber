import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  MessageCircle, 
  X, 
  Send, 
  Bot, 
  User, 
  Minimize2, 
  Maximize2,
  Phone,
  Calendar,
  Scissors,
  Star,
  Clock
} from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const AIChat = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Elite Cuts. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch, t∆∞ v·∫•n d·ªãch v·ª• ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ barbershop. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const quickReplies = [
    { text: 'ƒê·∫∑t l·ªãch h·∫πn', icon: Calendar },
    { text: 'Xem d·ªãch v·ª•', icon: Scissors },
    { text: 'Gi√° c·∫£', icon: Star },
    { text: 'Gi·ªù m·ªü c·ª≠a', icon: Clock },
    { text: 'Li√™n h·ªá', icon: Phone }
  ];

  const botResponses = {
    'ƒë·∫∑t l·ªãch': 'Tuy·ªát v·ªùi! B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch tr·ª±c ti·∫øp tr√™n website ho·∫∑c g·ªçi 0901 234 567. Ch√∫ng t√¥i c√≥ c√°c khung gi·ªù t·ª´ 9:00 - 18:00 h√†ng ng√†y. B·∫°n mu·ªën ƒë·∫∑t l·ªãch cho ng√†y n√†o?',
    'd·ªãch v·ª•': 'Ch√∫ng t√¥i c√≥ 4 g√≥i d·ªãch v·ª• ch√≠nh:\n‚Ä¢ C·∫Øt T√≥c & T·∫°o Ki·ªÉu ƒê·∫∑c Bi·ªát (850.000ƒë)\n‚Ä¢ Li·ªáu Tr√¨nh Ho√†ng Gia (1.500.000ƒë)\n‚Ä¢ T·∫°o Ki·ªÉu Nhanh (450.000ƒë)\n‚Ä¢ Tr·∫£i Nghi·ªám VIP (2.000.000ƒë)\n\nB·∫°n quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†o?',
    'gi√°': 'B·∫£ng gi√° d·ªãch v·ª• c·ªßa ch√∫ng t√¥i:\n‚Ä¢ T·∫°o Ki·ªÉu Nhanh: 450.000ƒë (30 ph√∫t)\n‚Ä¢ C·∫Øt T√≥c ƒê·∫∑c Bi·ªát: 850.000ƒë (60 ph√∫t)\n‚Ä¢ Li·ªáu Tr√¨nh Ho√†ng Gia: 1.500.000ƒë (90 ph√∫t)\n‚Ä¢ Tr·∫£i Nghi·ªám VIP: 2.000.000ƒë (120 ph√∫t)\n\nT·∫•t c·∫£ d·ªãch v·ª• ƒë·ªÅu bao g·ªìm t∆∞ v·∫•n mi·ªÖn ph√≠!',
    'gi·ªù': 'Gi·ªù ho·∫°t ƒë·ªông c·ªßa Elite Cuts:\n‚Ä¢ Th·ª© 2 - Ch·ªß nh·∫≠t: 9:00 - 18:00\n‚Ä¢ Ngh·ªâ c√°c ng√†y l·ªÖ l·ªõn\n‚Ä¢ ƒê·∫∑t l·ªãch tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó\n\nB·∫°n mu·ªën ƒë·∫∑t l·ªãch cho khung gi·ªù n√†o?',
    'li√™n h·ªá': 'Th√¥ng tin li√™n h·ªá Elite Cuts:\nüìû Hotline: 0901 234 567\nüìç ƒê·ªãa ch·ªâ: 123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM\n‚úâÔ∏è Email: info@elitecuts.vn\nüåê Website: elitecuts.vn\n\nCh√∫ng t√¥i lu√¥n s·∫µn s√†ng ph·ª•c v·ª• b·∫°n!'
  };

  const generateBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('ƒë·∫∑t l·ªãch') || message.includes('book') || message.includes('h·∫πn')) {
      return botResponses['ƒë·∫∑t l·ªãch'];
    } else if (message.includes('d·ªãch v·ª•') || message.includes('service')) {
      return botResponses['d·ªãch v·ª•'];
    } else if (message.includes('gi√°') || message.includes('price') || message.includes('cost')) {
      return botResponses['gi√°'];
    } else if (message.includes('gi·ªù') || message.includes('time') || message.includes('m·ªü c·ª≠a')) {
      return botResponses['gi·ªù'];
    } else if (message.includes('li√™n h·ªá') || message.includes('contact') || message.includes('ƒë·ªãa ch·ªâ')) {
      return botResponses['li√™n h·ªá'];
    } else if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch, t∆∞ v·∫•n d·ªãch v·ª• ho·∫∑c cung c·∫•p th√¥ng tin v·ªÅ Elite Cuts. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?';
    } else if (message.includes('c·∫£m ∆°n') || message.includes('thank')) {
      return 'R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! N·∫øu c·∫ßn th√™m th√¥ng tin g√¨, ƒë·ª´ng ng·∫°i li√™n h·ªá. Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi! üòä';
    } else {
      return 'T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn ƒëi·ªÅu ƒë√≥. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:\n‚Ä¢ G·ªçi hotline: 0901 234 567\n‚Ä¢ ƒê·∫∑t l·ªãch tr·ª±c ti·∫øp tr√™n website\n‚Ä¢ Gh√© thƒÉm c·ª≠a h√†ng t·∫°i 123 Nguy·ªÖn Hu·ªá, Q1\n\nHo·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ d·ªãch v·ª•, gi√° c·∫£, gi·ªù m·ªü c·ª≠a nh√©!';
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate bot typing delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateBotResponse(inputValue),
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickReply = (text: string) => {
    setInputValue(text);
    handleSendMessage();
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <>
      {/* Chat Toggle Button */}
      <AnimatePresence>
        {!isOpen && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            className="fixed bottom-6 right-6 z-50"
          >
            <Button
              onClick={() => setIsOpen(true)}
              className="w-16 h-16 rounded-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700 text-white shadow-2xl hover:shadow-purple-500/25 transition-all duration-300"
            >
              <MessageCircle className="w-8 h-8" />
            </Button>
            
            {/* Notification Badge */}
            <motion.div
              animate={{ scale: [1, 1.2, 1] }}
              transition={{ duration: 2, repeat: Infinity }}
              className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-xs font-bold text-white"
            >
              1
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ 
              opacity: 1, 
              y: 0, 
              scale: 1,
              height: isMinimized ? 60 : 500
            }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            className="fixed bottom-6 right-6 z-50 w-80 sm:w-96"
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <Card className="border-0 bg-gradient-to-br from-gray-900/95 to-black/95 backdrop-blur-md shadow-2xl overflow-hidden">
              {/* Chat Header */}
              <CardHeader className="p-4 bg-gradient-to-r from-purple-600/20 to-cyan-600/20 border-b border-purple-500/20">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="relative">
                      <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-cyan-600 rounded-full flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-gray-900"></div>
                    </div>
                    <div>
                      <CardTitle className="text-white text-lg">Tr·ª£ L√Ω AI</CardTitle>
                      <p className="text-sm text-gray-400">Elite Cuts Support</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsMinimized(!isMinimized)}
                      className="text-gray-400 hover:text-white"
                    >
                      {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsOpen(false)}
                      className="text-gray-400 hover:text-white"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>

              {/* Chat Content */}
              <AnimatePresence>
                {!isMinimized && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                  >
                    <CardContent className="p-0">
                      {/* Messages */}
                      <div className="h-80 overflow-y-auto p-4 space-y-4">
                        {messages.map((message) => (
                          <motion.div
                            key={message.id}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                          >
                            <div className={`flex items-start space-x-2 max-w-[80%] ${
                              message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                            }`}>
                              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                message.sender === 'user' 
                                  ? 'bg-gradient-to-r from-purple-600 to-cyan-600' 
                                  : 'bg-gray-700'
                              }`}>
                                {message.sender === 'user' ? (
                                  <User className="w-4 h-4 text-white" />
                                ) : (
                                  <Bot className="w-4 h-4 text-white" />
                                )}
                              </div>
                              <div className={`rounded-2xl p-3 ${
                                message.sender === 'user'
                                  ? 'bg-gradient-to-r from-purple-600 to-cyan-600 text-white'
                                  : 'bg-gray-800 text-gray-200'
                              }`}>
                                <p className="text-sm whitespace-pre-line">{message.text}</p>
                                <p className={`text-xs mt-1 ${
                                  message.sender === 'user' ? 'text-purple-100' : 'text-gray-500'
                                }`}>
                                  {formatTime(message.timestamp)}
                                </p>
                              </div>
                            </div>
                          </motion.div>
                        ))}
                        
                        {/* Typing Indicator */}
                        {isTyping && (
                          <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="flex justify-start"
                          >
                            <div className="flex items-start space-x-2">
                              <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center">
                                <Bot className="w-4 h-4 text-white" />
                              </div>
                              <div className="bg-gray-800 rounded-2xl p-3">
                                <div className="flex space-x-1">
                                  <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                                  <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-100"></div>
                                  <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-200"></div>
                                </div>
                              </div>
                            </div>
                          </motion.div>
                        )}
                        <div ref={messagesEndRef} />
                      </div>

                      {/* Quick Replies */}
                      <div className="p-4 border-t border-gray-700">
                        <div className="flex flex-wrap gap-2 mb-4">
                          {quickReplies.map((reply, index) => (
                            <Button
                              key={index}
                              variant="outline"
                              size="sm"
                              onClick={() => handleQuickReply(reply.text)}
                              className="border-gray-700 text-gray-300 hover:bg-purple-600/20 hover:border-purple-500 text-xs"
                            >
                              <reply.icon className="w-3 h-3 mr-1" />
                              {reply.text}
                            </Button>
                          ))}
                        </div>

                        {/* Input */}
                        <div className="flex space-x-2">
                          <Input
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            className="bg-gray-800/50 border-gray-700 text-white flex-1"
                          />
                          <Button
                            onClick={handleSendMessage}
                            disabled={!inputValue.trim()}
                            className="bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-700 hover:to-cyan-700 text-white"
                          >
                            <Send className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </motion.div>
                )}
              </AnimatePresence>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default AIChat;